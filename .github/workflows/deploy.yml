name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload production files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "infra/production/*"
          target: "/opt/flashpage/"
          overwrite: true

      - name: Set file permissions and deploy
        uses: appleboy/ssh-action@v1.0.0
        env:
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          GIPHY_API_KEY: ${{ secrets.GIPHY_API_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: MONGO_PASSWORD,GIPHY_API_KEY,CLOUDFLARE_API_TOKEN
          script: |
            # Navigate to application directory
            cd /opt/flashpage

            # Set proper ownership and permissions for files
            sudo chown www:www docker-compose.yml Caddyfile
            sudo chmod 644 docker-compose.yml Caddyfile

            # Export environment variables for docker-compose
            export MONGO_PASSWORD="$MONGO_PASSWORD"
            export GIPHY_API_KEY="$GIPHY_API_KEY"
            export CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_TOKEN"

            # Pull latest images
            sudo -u www docker compose pull

            # Deploy with environment variables preserved using -E flag
            sudo -E -u www docker compose up -d

            # Clean up old images
            docker image prune -f

            echo "Deployment completed successfully"