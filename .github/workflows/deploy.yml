name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload production files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "infra/production/*"
          target: "/tmp/flashpage-deploy/"
          strip_components: 2
          overwrite: true

      - name: Set file permissions and deploy
        uses: appleboy/ssh-action@v1.0.0
        env:
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          GIPHY_API_KEY: ${{ secrets.GIPHY_API_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: MONGO_PASSWORD,GIPHY_API_KEY,CLOUDFLARE_API_TOKEN
          script: |
            # Exit immediately if any command fails
            set -e

            # Move files from staging to production directory
            sudo mkdir -p /opt/flashpage
            sudo cp /tmp/flashpage-deploy/* /opt/flashpage/
            sudo chown www:www /opt/flashpage/docker-compose.yml /opt/flashpage/Caddyfile
            sudo chmod 644 /opt/flashpage/docker-compose.yml /opt/flashpage/Caddyfile

            # Clean up staging directory
            rm -rf /tmp/flashpage-deploy

            # Navigate to application directory
            cd /opt/flashpage

            # Create .env file for docker-compose
            {
              echo "MONGO_PASSWORD=$MONGO_PASSWORD"
              echo "GIPHY_API_KEY=$GIPHY_API_KEY"
              echo "CLOUDFLARE_API_TOKEN=$CLOUDFLARE_API_TOKEN"
            } | sudo tee .env > /dev/null
            sudo chown www:www .env
            sudo chmod 600 .env

            # Pull latest images
            sudo -u www docker compose pull

            # Deploy with environment variables from .env file
            sudo -u www docker compose up -d --force-recreate

            # Wait for services to start and verify they're healthy
            echo "Waiting for services to start..."
            sleep 15

            # Check if all services are running
            if ! sudo -u www docker compose ps --format table | grep -q "Up"; then
              echo "❌ Deployment failed - services not running properly"
              sudo -u www docker compose logs
              exit 1
            fi

            # Check if app is responding
            if ! curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "⚠️  Warning: App health check failed, but containers are running"
            else
              echo "✅ App health check passed"
            fi

            # Clean up old images
            docker image prune -f

            echo "✅ Deployment completed successfully"